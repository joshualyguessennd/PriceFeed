/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface VRFConsumerInterface extends Interface {
  functions: {
    nonces: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    randomnessOutput: TypedFunctionDescription<{ encode([]: []): string }>;

    rawFulfillRandomness: TypedFunctionDescription<{
      encode([requestId, randomness]: [Arrayish, BigNumberish]): string;
    }>;

    requestId: TypedFunctionDescription<{ encode([]: []): string }>;

    testRequestRandomness: TypedFunctionDescription<{
      encode([_keyHash, _fee, _seed]: [
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class VRFConsumer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VRFConsumer;
  attach(addressOrName: string): VRFConsumer;
  deployed(): Promise<VRFConsumer>;

  on(event: EventFilter | string, listener: Listener): VRFConsumer;
  once(event: EventFilter | string, listener: Listener): VRFConsumer;
  addListener(eventName: EventFilter | string, listener: Listener): VRFConsumer;
  removeAllListeners(eventName: EventFilter | string): VRFConsumer;
  removeListener(eventName: any, listener: Listener): VRFConsumer;

  interface: VRFConsumerInterface;

  functions: {
    nonces(arg0: Arrayish): Promise<BigNumber>;

    randomnessOutput(): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: Arrayish,
      randomness: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestId(): Promise<string>;

    testRequestRandomness(
      _keyHash: Arrayish,
      _fee: BigNumberish,
      _seed: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  nonces(arg0: Arrayish): Promise<BigNumber>;

  randomnessOutput(): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: Arrayish,
    randomness: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestId(): Promise<string>;

  testRequestRandomness(
    _keyHash: Arrayish,
    _fee: BigNumberish,
    _seed: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    nonces(arg0: Arrayish): Promise<BigNumber>;

    randomnessOutput(): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: Arrayish,
      randomness: BigNumberish
    ): Promise<BigNumber>;

    requestId(): Promise<BigNumber>;

    testRequestRandomness(
      _keyHash: Arrayish,
      _fee: BigNumberish,
      _seed: BigNumberish
    ): Promise<BigNumber>;
  };
}
