/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface OracleInterface2Interface extends Interface {
  functions: {
    fulfillOracleRequest2: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data,
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class OracleInterface2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OracleInterface2;
  attach(addressOrName: string): OracleInterface2;
  deployed(): Promise<OracleInterface2>;

  on(event: EventFilter | string, listener: Listener): OracleInterface2;
  once(event: EventFilter | string, listener: Listener): OracleInterface2;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OracleInterface2;
  removeAllListeners(eventName: EventFilter | string): OracleInterface2;
  removeListener(eventName: any, listener: Listener): OracleInterface2;

  interface: OracleInterface2Interface;

  functions: {
    fulfillOracleRequest2(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  fulfillOracleRequest2(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    fulfillOracleRequest2(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;
  };
}
